name: Draft Releases
on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  detect-affected:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.detect.outputs.apps }}
      base_ref: ${{ steps.detect.outputs.base_ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Detect affected apps
        id: detect
        run: |
          # Use last release tag as base for affected detection
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            BASE_REF="$LAST_TAG"
            echo "Using last release tag as base: $LAST_TAG"
          else
            BASE_REF="origin/main"
            echo "No release tags found, using origin/main as base"
          fi
          
          echo "Comparing against base: $BASE_REF"
          echo "base_ref=$BASE_REF" >> "$GITHUB_OUTPUT"
          
          apps=$(npx nx show projects --affected --base="$BASE_REF" --json | jq -r '.[]' | grep -E '^(backend|design|devops|dsa|frontend|home|shell)$' | jq -R -s -c 'split("\n")[:-1]')
          echo "Affected apps: $apps"
          echo "apps=$apps" >> "$GITHUB_OUTPUT"

  release:
    needs: detect-affected
    if: ${{ needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating unified release for affected apps: ${{ needs.detect-affected.outputs.apps }}"
          echo "Base reference used for detection: ${{ needs.detect-affected.outputs.base_ref }}"

          # Run release-it
          npx release-it --ci

          # Capture the version
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "Released version: $version"

  deploy:
    needs: [detect-affected, release]
    if: ${{ always() && needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-affected.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
