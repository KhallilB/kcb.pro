name: Draft Releases
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  detect-affected:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.set.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci
      - id: set
        run: |
          BASE=$(git merge-base HEAD HEAD~1)
          apps=$(npx nx show projects --affected --base=$BASE --target=build --json)
          echo "apps=$apps" >> "$GITHUB_OUTPUT"

  release:
    needs: detect-affected
    if: ${{ needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    concurrency:
      group: releases
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci

      - name: Disable Husky and setup Git
        run: |
          export HUSKY=0
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global core.hooksPath /dev/null
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Release affected apps sequentially
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AFFECTED_APPS: ${{ needs.detect-affected.outputs.apps }}
        run: |
          echo "Releasing apps: $AFFECTED_APPS"
          
          for app in $(echo $AFFECTED_APPS | jq -r '.[]'); do
            echo "üöÄ Starting release for $app..."
            cd apps/$app
            
            # Let release-it handle everything according to its config
            # Only disable git push, release-it will create the draft GitHub release
            if HUSKY=0 npx release-it --ci --no-git.push --no-git.requireCleanWorkingDir; then
              version=$(cat package.json | jq -r '.version')
              echo "‚úÖ Released $app v$version with draft GitHub release"
            else
              echo "‚ùå Failed to release $app, continuing with next app..."
            fi
            
            cd ../..
          done

      - name: Push all changes at once
        run: |
          # Push all commits and tags together
          HUSKY=0 git push --follow-tags --no-verify origin main