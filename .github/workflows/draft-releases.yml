name: Draft Releases
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  detect-affected:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.set.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci
      - id: set
        run: |
          BASE=$(git merge-base HEAD HEAD~1)
          apps=$(npx nx show projects --affected --base=$BASE --target=build --json)
          echo "apps=$apps" >> "$GITHUB_OUTPUT"

  release:
    needs: detect-affected
    if: ${{ needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-affected.outputs.apps) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci

      - name: Disable Husky and setup Git
        run: |
          export HUSKY=0
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global core.hooksPath /dev/null
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Create Release Draft for ${{ matrix.app }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Starting release for ${{ matrix.app }}..."
          cd apps/${{ matrix.app }}
          
          # Use the npm run release script with proper tag naming
          if HUSKY=0 npm run release; then
            version=$(cat package.json | jq -r '.version')
            echo "‚úÖ Released ${{ matrix.app }} v$version with draft GitHub release"
          else
            echo "‚ùå Failed to release ${{ matrix.app }}"
            exit 1
          fi

  push-changes:
    needs: [detect-affected, release]
    if: ${{ needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
      - name: Pull and push all changes
        run: |
          # Pull any changes made by parallel jobs
          git pull --rebase origin main
          # Push all commits and tags together
          git push --follow-tags origin main