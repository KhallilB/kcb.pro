name: release
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  detect-affected:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.set.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci
      - id: set
        run: |
          BASE=$(git merge-base HEAD HEAD~1)
          apps=$(npx nx show projects --affected --base=$BASE --target=build --json)
          echo "apps=$apps" >> "$GITHUB_OUTPUT"

  release:
    needs: detect-affected
    if: ${{ needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect-affected.outputs.apps) }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci

      - name: Git setup
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global core.hooksPath /dev/null
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Fetch latest changes before release
        run: |
          git fetch origin main
          git reset --hard origin/main

      - name: Release ${{ matrix.app }}
        working-directory: apps/${{ matrix.app }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx release-it --ci

      - name: Store release info
        run: |
          mkdir -p release-artifacts
          version=$(cat apps/${{ matrix.app }}/package.json | jq -r '.version')
          echo "${{ matrix.app }}-v$version" > release-artifacts/${{ matrix.app }}-tag.txt
          echo "$version" > release-artifacts/${{ matrix.app }}-version.txt
          
          # Store changelog if it exists
          if [ -f "apps/${{ matrix.app }}/CHANGELOG.md" ]; then
            cp "apps/${{ matrix.app }}/CHANGELOG.md" "release-artifacts/${{ matrix.app }}-changelog.md"
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.app }}
          path: release-artifacts/

  push-all-releases:
    needs: [detect-affected, release]
    if: ${{ needs.detect-affected.outputs.apps != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Git setup
        run: |
          git config --global user.name  "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global core.hooksPath /dev/null
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-*
          merge-multiple: true
          path: release-artifacts/

      - name: Fetch all release commits
        run: |
          git fetch origin main
          git reset --hard origin/main

      - name: Create GitHub releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AFFECTED_APPS: ${{ needs.detect-affected.outputs.apps }}
        run: |
          for app in $(echo $AFFECTED_APPS | jq -r '.[]'); do
            if [ -f "release-artifacts/$app-version.txt" ]; then
              version=$(cat "release-artifacts/$app-version.txt")
              tag_name="$app-v$version"
              
              echo "Creating GitHub draft release for $app v$version..."
              
              # Use changelog if available, otherwise generate notes
              if [ -f "release-artifacts/$app-changelog.md" ]; then
                gh release create "$tag_name" \
                  --title "$app v$version" \
                  --notes-file "release-artifacts/$app-changelog.md" \
                  --draft \
                  || echo "Release $tag_name may already exist"
              else
                gh release create "$tag_name" \
                  --title "$app v$version" \
                  --generate-notes \
                  --draft \
                  || echo "Release $tag_name may already exist"
              fi
              
              echo "✅ Created draft release: $tag_name"
            fi
          done

      - name: Push all changes with automatic rebase (max 5 tries)
        env: { MAX_RETRIES: 5 }
        run: |
          set -e
          n=0
          while ! git push --follow-tags --no-verify; do
            n=$((n+1))
            if [ "$n" -ge "$MAX_RETRIES" ]; then
              echo "❌  Push failed after $MAX_RETRIES attempts"; exit 1
            fi
            echo "⚠️   main moved — re-basing (attempt $n)…"
            git fetch origin main
            git rebase origin/main
          done
          echo "✅  Push succeeded after $n re-tries"
