name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Configure git
        run: |
          git config --global user.name "release-bot"
          git config --global user.email "release-bot@users.noreply.github.com"

      - name: Install dependencies
        run: npm install

      - name: Check if first release
        id: check_first
        run: |
          # Check if any release tags exist
          EXISTING_TAGS=$(git tag --list "*@*")
          if [ -z "$EXISTING_TAGS" ]; then
            echo "is_first_release=true" >> $GITHUB_OUTPUT
            echo "üéâ This is the first release"
          else
            echo "is_first_release=false" >> $GITHUB_OUTPUT
            echo "üì¶ Found existing releases"
          fi

      - name: Debug recent commits
        run: |
          echo "üîç Recent commits:"
          git log --oneline -10
          echo ""
          echo "üè∑Ô∏è  Current tags:"
          git tag --list "*@*" | sort -V | tail -10
          echo ""
          if [ "${{ steps.check_first.outputs.is_first_release }}" == "false" ]; then
            echo "üìà Commits since last release:"
            # Show commits since the latest tag
            LATEST_TAG=$(git tag --list "*@*" | sort -V | tail -1)
            if [ -n "$LATEST_TAG" ]; then
              echo "Since $LATEST_TAG:"
              git log ${LATEST_TAG}..HEAD --oneline || echo "No commits since last tag"
            fi
          fi

      - name: Test nx release (dry run)
        id: dry_run
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          echo "üß™ Testing what nx release would do..."

          if [ "${{ steps.check_first.outputs.is_first_release }}" == "true" ]; then
            echo "Testing first release for all apps..."
            RESULT=$(npx nx release --first-release --dry-run --verbose 2>&1)
          else
            echo "Testing standard release for all projects..."
            RESULT=$(npx nx release --dry-run --verbose 2>&1)
          fi

          echo "üìã Dry run output:"
          echo "$RESULT"
          echo ""

          # Check if nx detected any changes worth releasing
          if echo "$RESULT" | grep -q "No changes were detected\|No files would be changed"; then
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "‚ùå Nx detected no changes requiring release"
          elif echo "$RESULT" | grep -q "would be bumped\|New version\|would update"; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Nx detected changes requiring release"
          else
            # For first release, proceed if there are any apps
            if [ "${{ steps.check_first.outputs.is_first_release }}" == "true" ]; then
              echo "needs_release=true" >> $GITHUB_OUTPUT
              echo "‚úÖ First release - proceeding"
            else
              echo "needs_release=false" >> $GITHUB_OUTPUT
              echo "‚ùì Unclear - skipping to be safe"
            fi
          fi

      - name: Run nx release
        if: steps.dry_run.outputs.needs_release == 'true'
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          echo "üöÄ Running nx release..."

          if [ "${{ steps.check_first.outputs.is_first_release }}" == "true" ]; then
            echo "üéâ Running first release"
            npx nx release --first-release --verbose
          else
            echo "üì¶ Running standard release"
            npx nx release --verbose
          fi

          echo "‚úÖ Release completed"

      - name: Get released projects
        if: steps.dry_run.outputs.needs_release == 'true'
        id: released
        run: |
          # Get all project tags created in this run
          NEW_TAGS=$(git tag --points-at HEAD | grep "@")
          echo "üè∑Ô∏è  New tags created:"
          echo "$NEW_TAGS"

          # Extract project names from tags
          RELEASED_PROJECTS=""
          if [ -n "$NEW_TAGS" ]; then
            RELEASED_PROJECTS=$(echo "$NEW_TAGS" | sed 's/@.*//' | tr '\n' ',' | sed 's/,$//')
          fi

          echo "released_projects=$RELEASED_PROJECTS" >> $GITHUB_OUTPUT
          echo "üì¶ Released projects: $RELEASED_PROJECTS"

      - name: Create GitHub release drafts
        if: steps.dry_run.outputs.needs_release == 'true' && steps.released.outputs.released_projects != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASED_PROJECTS="${{ steps.released.outputs.released_projects }}"

          echo "$RELEASED_PROJECTS" | tr ',' '\n' | while read -r PROJECT; do
            if [ -n "$PROJECT" ]; then
              echo "üìù Creating GitHub release for $PROJECT..."
              
              # Get the latest tag for this project
              PROJECT_TAG=$(git tag --list "${PROJECT}@*" --sort=-version:refname | head -1)
              
              if [ -n "$PROJECT_TAG" ]; then
                VERSION=$(echo "$PROJECT_TAG" | sed "s/${PROJECT}@//")
                echo "üè∑Ô∏è  Found tag: $PROJECT_TAG (version: $VERSION)"
                
                # Read changelog content if it exists
                CHANGELOG_FILE="apps/${PROJECT}/CHANGELOG.md"
                if [ ! -f "$CHANGELOG_FILE" ]; then
                  CHANGELOG_FILE="libs/${PROJECT}/CHANGELOG.md"
                fi
                
                RELEASE_NOTES=""
                if [ -f "$CHANGELOG_FILE" ]; then
                  echo "üìñ Reading changelog from $CHANGELOG_FILE"
                  # Extract the latest version's changelog content
                  RELEASE_NOTES=$(awk "/^## \[?${VERSION}\]?|^## ${VERSION}/ {flag=1; next} /^## / && flag {exit} flag {print}" "$CHANGELOG_FILE")
                fi
                
                if [ -z "$RELEASE_NOTES" ]; then
                  RELEASE_NOTES="üöÄ Release ${VERSION} of ${PROJECT}

                  What's new in this release:
                  $(git log --pretty=format:"- %s" $(git tag --list "${PROJECT}@*" --sort=-version:refname | sed -n '2p' || echo 'HEAD~10')..${PROJECT_TAG} 2>/dev/null || git log --pretty=format:"- %s" -5)"
                fi
                
                # Create GitHub release draft
                gh release create "$PROJECT_TAG" \
                  --draft \
                  --title "${PROJECT} v${VERSION}" \
                  --notes "$RELEASE_NOTES"
                
                echo "‚úÖ Created draft release for ${PROJECT} v${VERSION}"
              else
                echo "‚ö†Ô∏è  No tag found for $PROJECT"
              fi
            fi
          done

      - name: Push changes
        if: steps.dry_run.outputs.needs_release == 'true'
        run: |
          echo "üì§ Pushing all changes and tags..."
          git push --follow-tags origin main
          echo "‚úÖ All changes pushed"

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "üìä Release Summary:"
          echo "==================="
          echo "‚Ä¢ First release: ${{ steps.check_first.outputs.is_first_release }}"
          echo "‚Ä¢ Needs release: ${{ steps.dry_run.outputs.needs_release }}"

          if [ "${{ steps.dry_run.outputs.needs_release }}" == "true" ]; then
            echo "‚Ä¢ Released projects: ${{ steps.released.outputs.released_projects }}"
            echo ""
            echo "‚úÖ Release completed successfully!"
            echo "üìù Check GitHub releases for draft releases to publish"
          else
            echo ""
            echo "‚ÑπÔ∏è  No releases needed - no conventional commits detected since last release"
          fi
