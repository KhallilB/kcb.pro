name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Configure git
        run: |
          git config --global user.name "release-bot"
          git config --global user.email "release-bot@users.noreply.github.com"

      - name: Install dependencies
        run: npm install

      - name: Find affected apps
        id: affected
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          # Find the last tag or use a fallback
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using initial commit as base"
            BASE_REF=$(git rev-list --max-parents=0 HEAD)
            echo "is_first_release=true" >> $GITHUB_OUTPUT
          else
            echo "Using last tag as base: $LAST_TAG"
            BASE_REF="$LAST_TAG"
            echo "is_first_release=false" >> $GITHUB_OUTPUT
          fi

          # Get affected apps using nx
          AFFECTED_APPS=$(npx nx show projects --affected \
            --base="$BASE_REF" \
            --head="HEAD" \
            --type=app \
            --json 2>/dev/null | jq -r '.[]')

          echo "Base ref: $BASE_REF"
          echo "Affected apps:"
          echo "$AFFECTED_APPS"

          # Convert to comma-separated list for nx release
          if [ -n "$AFFECTED_APPS" ] && [ "$AFFECTED_APPS" != "null" ]; then
            APPS_LIST=$(echo "$AFFECTED_APPS" | tr '\n' ',' | sed 's/,$//')
            echo "apps_list=$APPS_LIST" >> $GITHUB_OUTPUT
            echo "has_affected=true" >> $GITHUB_OUTPUT
          else
            echo "has_affected=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for conventional commits
        if: steps.affected.outputs.has_affected == 'true'
        id: commits
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          BASE_REF=${LAST_TAG:-$(git rev-list --max-parents=0 HEAD)}

          # Check for conventional commits
          COMMITS=$(git log ${BASE_REF}..HEAD --oneline --grep="^feat" --grep="^fix" --grep="^BREAKING CHANGE" --grep="^feat!" --grep="^fix!" --extended-regexp)

          if [ -n "$COMMITS" ]; then
            echo "Found conventional commits:"
            echo "$COMMITS"
            echo "has_conventional_commits=true" >> $GITHUB_OUTPUT
          else
            echo "No conventional commits found"
            echo "has_conventional_commits=false" >> $GITHUB_OUTPUT
          fi

      - name: Run nx release for affected apps
        if: steps.affected.outputs.has_affected == 'true' && steps.commits.outputs.has_conventional_commits == 'true'
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          APPS_LIST="${{ steps.affected.outputs.apps_list }}"
          echo "Running nx release for apps: $APPS_LIST"

          # Add --first-release flag if this is the first release
          if [ "${{ steps.affected.outputs.is_first_release }}" == "true" ]; then
            echo "üéâ Running first release with --first-release flag"
            npx nx release --projects="$APPS_LIST" --first-release --verbose
          else
            echo "Running standard release"
            npx nx release --projects="$APPS_LIST" --verbose
          fi

          echo "‚úÖ Release completed for affected apps"

      - name: Create GitHub release drafts
        if: steps.affected.outputs.has_affected == 'true' && steps.commits.outputs.has_conventional_commits == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APPS_LIST="${{ steps.affected.outputs.apps_list }}"

          # Convert comma-separated list back to individual apps
          echo "$APPS_LIST" | tr ',' '\n' | while read -r APP; do
            if [ -n "$APP" ]; then
              echo "Creating GitHub release for $APP..."
              
              # Get the latest tag for this app
              APP_TAG=$(git tag --list "${APP}@*" --sort=-version:refname | head -1)
              
              if [ -n "$APP_TAG" ]; then
                # Extract version from tag
                VERSION=$(echo "$APP_TAG" | sed "s/${APP}@//")
                
                echo "Found tag: $APP_TAG (version: $VERSION)"
                
                # Read changelog content if it exists
                CHANGELOG_FILE="apps/${APP}/CHANGELOG.md"
                RELEASE_NOTES=""
                
                if [ -f "$CHANGELOG_FILE" ]; then
                  # Extract the latest version's changelog content
                  # This gets content between the first ## heading and the next ## heading
                  RELEASE_NOTES=$(awk "/^## \[?${VERSION}\]?|^## ${VERSION}/ {flag=1; next} /^## / && flag {exit} flag {print}" "$CHANGELOG_FILE")
                  
                  if [ -z "$RELEASE_NOTES" ]; then
                    # Fallback: get content from the top until the second ## heading
                    RELEASE_NOTES=$(awk '/^## / {if(++count==2) exit; if(count==1) next} count==1 {print}' "$CHANGELOG_FILE")
                  fi
                fi
                
                # Use default release notes if changelog is empty
                if [ -z "$RELEASE_NOTES" ]; then
                  RELEASE_NOTES="Release ${VERSION} of ${APP}

                Changes included in this release: $(git log ${APP}@$(git tag --list "${APP}@*" --sort=-version:refname | sed -n '2p' | sed "s/${APP}@//" || echo "HEAD~10")..${APP_TAG} --oneline --pretty=format:"- %s" || git log --oneline -10 --pretty=format:"- %s")"
                fi
                
                # Create GitHub release draft
                gh release create "$APP_TAG" \
                  --draft \
                  --title "${APP} ${VERSION}" \
                  --notes "$RELEASE_NOTES" \
                  --repo "$GITHUB_REPOSITORY"
                
                echo "‚úÖ Created draft release for ${APP} ${VERSION}"
              else
                echo "‚ö†Ô∏è  No tag found for $APP, skipping GitHub release"
              fi
            fi
          done

      - name: Push all changes
        if: steps.affected.outputs.has_affected == 'true' && steps.commits.outputs.has_conventional_commits == 'true'
        run: |
          echo "Pushing all accumulated changes and tags..."
          git push --follow-tags origin main
          echo "‚úÖ All changes and tags pushed successfully"

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.affected.outputs.has_affected }}" == "true" ]; then
            echo "üéØ Affected apps: ${{ steps.affected.outputs.apps_list }}"
            if [ "${{ steps.commits.outputs.has_conventional_commits }}" == "true" ]; then
              echo "‚úÖ Releases completed and pushed"
              echo "üìù GitHub release drafts created"
              echo ""
              echo "To publish the releases:"
              echo "1. Go to https://github.com/$GITHUB_REPOSITORY/releases"
              echo "2. Review and edit the draft releases"
              echo "3. Click 'Publish release' for each one"
            else
              echo "‚è≠Ô∏è  No conventional commits found, skipped releases"
            fi
          else
            echo "‚ÑπÔ∏è  No affected apps found, no releases needed"
          fi
