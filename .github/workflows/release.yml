name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Configure git
        run: |
          git config --global user.name "release-bot"
          git config --global user.email "release-bot@users.noreply.github.com"

      - name: Install dependencies
        run: npm install

      - name: Check for existing releases
        id: check_releases
        run: |
          # Check if any release tags exist
          EXISTING_TAGS=$(git tag --list "*@*")
          if [ -z "$EXISTING_TAGS" ]; then
            echo "No release tags found - this is the first release"
            echo "is_first_release=true" >> $GITHUB_OUTPUT
            echo "base_ref=HEAD~100" >> $GITHUB_OUTPUT  # Check last 100 commits for first release
          else
            echo "Found existing release tags"
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "is_first_release=false" >> $GITHUB_OUTPUT
            echo "base_ref=$LAST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Find affected apps
        id: affected
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          BASE_REF="${{ steps.check_releases.outputs.base_ref }}"
          
          if [ "${{ steps.check_releases.outputs.is_first_release }}" == "true" ]; then
            # For first release, consider all apps as affected
            echo "First release - considering all apps as affected"
            ALL_APPS=$(npx nx show projects --type=app --json | jq -r '.[]')
            echo "All apps:"
            echo "$ALL_APPS"
            APPS_LIST=$(echo "$ALL_APPS" | tr '\n' ',' | sed 's/,$//')
          else
            # Get affected apps using nx
            echo "Finding affected apps since: $BASE_REF"
            AFFECTED_APPS=$(npx nx show projects --affected \
              --base="$BASE_REF" \
              --head="HEAD" \
              --type=app \
              --json 2>/dev/null | jq -r '.[]')

            echo "Affected apps:"
            echo "$AFFECTED_APPS"
            APPS_LIST=$(echo "$AFFECTED_APPS" | tr '\n' ',' | sed 's/,$//')
          fi

          if [ -n "$APPS_LIST" ] && [ "$APPS_LIST" != "null" ] && [ "$APPS_LIST" != "" ]; then
            echo "apps_list=$APPS_LIST" >> $GITHUB_OUTPUT
            echo "has_affected=true" >> $GITHUB_OUTPUT
            echo "Final apps list: $APPS_LIST"
          else
            echo "has_affected=false" >> $GITHUB_OUTPUT
            echo "No affected apps found"
          fi

      - name: Debug recent commits
        if: steps.affected.outputs.has_affected == 'true'
        run: |
          echo "üîç Debugging recent commits..."
          echo "Last 10 commits:"
          git log --oneline -10
          echo ""
          echo "Commits with conventional format:"
          git log --oneline -20 --grep="^feat" --grep="^fix" --grep="^chore" --grep="^docs" --grep="^style" --grep="^refactor" --grep="^perf" --grep="^test" --grep="^build" --grep="^ci" --extended-regexp || echo "No conventional commits found with grep"
          echo ""
          echo "All commit messages (last 10):"
          git log --pretty=format:"%h - %s" -10

      - name: Test nx release dry run
        if: steps.affected.outputs.has_affected == 'true'
        id: dry_run
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          APPS_LIST="${{ steps.affected.outputs.apps_list }}"
          echo "Testing nx release dry run for apps: $APPS_LIST"
          
          # Test what nx release would do
          if [ "${{ steps.check_releases.outputs.is_first_release }}" == "true" ]; then
            echo "Testing first release..."
            RESULT=$(npx nx release --projects="$APPS_LIST" --first-release --dry-run --verbose 2>&1)
          else
            echo "Testing standard release..."
            RESULT=$(npx nx release --projects="$APPS_LIST" --dry-run --verbose 2>&1)
          fi
          
          echo "Dry run result:"
          echo "$RESULT"
          
          # Check if nx would actually release something
          if echo "$RESULT" | grep -q "No changes to publish"; then
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "‚ùå Nx detected no changes requiring release"
          elif echo "$RESULT" | grep -q "would be bumped"; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Nx detected changes requiring release"
          elif echo "$RESULT" | grep -q "New version"; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Nx detected changes requiring release"
          else
            # For first release, assume we need it
            if [ "${{ steps.check_releases.outputs.is_first_release }}" == "true" ]; then
              echo "needs_release=true" >> $GITHUB_OUTPUT
              echo "‚úÖ First release - proceeding"
            else
              echo "needs_release=false" >> $GITHUB_OUTPUT
              echo "‚ùì Unclear if release needed - skipping"
            fi
          fi

      - name: Run nx release
        if: steps.affected.outputs.has_affected == 'true' && steps.dry_run.outputs.needs_release == 'true'
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
        run: |
          APPS_LIST="${{ steps.affected.outputs.apps_list }}"
          echo "Running nx release for apps: $APPS_LIST"

          # Run the actual release
          if [ "${{ steps.check_releases.outputs.is_first_release }}" == "true" ]; then
            echo "üéâ Running first release"
            npx nx release --projects="$APPS_LIST" --first-release --verbose
          else
            echo "Running standard release"
            npx nx release --projects="$APPS_LIST" --verbose
          fi

          echo "‚úÖ Release completed for affected apps"

      - name: Create GitHub release drafts
        if: steps.affected.outputs.has_affected == 'true' && steps.dry_run.outputs.needs_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APPS_LIST="${{ steps.affected.outputs.apps_list }}"
          
          echo "$APPS_LIST" | tr ',' '\n' | while read -r APP; do
            if [ -n "$APP" ]; then
              echo "Creating GitHub release for $APP..."
              
              # Get the latest tag for this app
              APP_TAG=$(git tag --list "${APP}@*" --sort=-version:refname | head -1)
              
              if [ -n "$APP_TAG" ]; then
                VERSION=$(echo "$APP_TAG" | sed "s/${APP}@//")
                echo "Found tag: $APP_TAG (version: $VERSION)"
                
                # Read changelog content if it exists
                CHANGELOG_FILE="apps/${APP}/CHANGELOG.md"
                RELEASE_NOTES=""
                
                if [ -f "$CHANGELOG_FILE" ]; then
                  RELEASE_NOTES=$(awk "/^## \[?${VERSION}\]?|^## ${VERSION}/ {flag=1; next} /^## / && flag {exit} flag {print}" "$CHANGELOG_FILE")
                fi
                
                if [ -z "$RELEASE_NOTES" ]; then
                  RELEASE_NOTES="Release ${VERSION} of ${APP}

üöÄ What's new in this release"
                fi
                
                # Create GitHub release draft
                gh release create "$APP_TAG" \
                  --draft \
                  --title "${APP} ${VERSION}" \
                  --notes "$RELEASE_NOTES" \
                  --repo "$GITHUB_REPOSITORY"
                
                echo "‚úÖ Created draft release for ${APP} ${VERSION}"
              else
                echo "‚ö†Ô∏è  No tag found for $APP, skipping GitHub release"
              fi
            fi
          done

      - name: Push all changes
        if: steps.affected.outputs.has_affected == 'true' && steps.dry_run.outputs.needs_release == 'true'
        run: |
          echo "Pushing all accumulated changes and tags..."
          git push --follow-tags origin main
          echo "‚úÖ All changes and tags pushed successfully"

      - name: Summary
        if: always()
        run: |
          echo "üìä Release Summary:"
          echo "- First release: ${{ steps.check_releases.outputs.is_first_release }}"
          echo "- Has affected apps: ${{ steps.affected.outputs.has_affected }}"
          if [ "${{ steps.affected.outputs.has_affected }}" == "true" ]; then
            echo "- Affected apps: ${{ steps.affected.outputs.apps_list }}"
            echo "- Needs release: ${{ steps.dry_run.outputs.needs_release }}"
            
            if [ "${{ steps.dry_run.outputs.needs_release }}" == "true" ]; then
              echo "‚úÖ Releases completed and pushed"
              echo "üìù GitHub release drafts created"
            else
              echo "‚è≠Ô∏è  No changes detected by Nx that require release"
            fi
          else
            echo "‚ÑπÔ∏è  No affected apps found"
          fi