name: release
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }

      - run: git config --global user.name "release-bot"
      - run: git config --global user.email "release-bot@users.noreply.github.com"

      - run: npm install

      - name: Get affected apps
        id: affected
        run: |
          APPS=$(npx nx show projects --affected \
                    --base="${{ github.event.before }}" \
                    --head="${{ github.event.after }}" \
                    --json | jq -r '.[]' | jq -R -s -c 'split("\n")[:-1]')
          echo "apps=$APPS" >> $GITHUB_OUTPUT

      - name: Process releases
        if: steps.affected.outputs.apps != '[]'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '${{ steps.affected.outputs.apps }}' | jq -r '.[]' | while read app; do
            echo "Processing $app..."
            
            # Step 1: Determine next version using nx
            NEXT_VER=$(npx nx release version --projects="$app" --dry-run --verbose 2>&1 | \
              grep -E "New version.*[0-9]+\.[0-9]+\.[0-9]+" | \
              sed -E 's/.*New version[^0-9]*([0-9]+\.[0-9]+\.[0-9]+[^[:space:]]*).*/\1/' | head -1)
            
            if [ -n "$NEXT_VER" ]; then
              echo "Next version for $app: $NEXT_VER"
              
              # Step 2: Generate changelog for that version
              npx nx release changelog "$NEXT_VER" \
                --projects="$app" \
                --git-commit=false --git-tag=false --git-push=false
              
              # Step 3: Bump the version
              npx nx release version \
                --projects="$app" \
                --git-commit=false --git-tag=false --git-push=false
              
              # Step 4: Create GitHub draft release
              gh release create "$app@$NEXT_VER" \
                --repo "$GITHUB_REPOSITORY" \
                --draft \
                --title "$app $NEXT_VER" \
                --notes-file "apps/$app/CHANGELOG.md"
              
              echo "âœ… Created draft release for $app@$NEXT_VER"
            else
              echo "No version change needed for $app"
            fi
          done

      - name: Commit and push
        if: steps.affected.outputs.apps != '[]'
        run: |
          git add .
          git commit --no-verify -m "chore(release): update versions and changelogs"
          git push --no-verify origin main
