name: version
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      appsJson: ${{ steps.affected.outputs.appsJson }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: git config --global user.name  "release-bot"
      - run: git config --global user.email "release-bot@users.noreply.github.com"

      - run: npm install

      - id: affected
        run: |
          BASE="${{ github.event.before }}"
          HEAD="${{ github.event.after }}"

          mapfile -t list < <(npx nx show projects --affected --base="$BASE" --head="$HEAD" --json | jq -r '.[]')

          APPS_CSV=$(IFS=, ; echo "${list[*]}")
          APPS_JSON=$(printf '%s\n' "${list[@]}" | jq -R -s -c 'split("\n")[:-1]')

          echo "appsCsv=$APPS_CSV"
          echo "appsJson=$APPS_JSON"

          echo "appsCsv=$APPS_CSV"   >> "$GITHUB_OUTPUT"
          echo "appsJson=$APPS_JSON" >> "$GITHUB_OUTPUT"

      - name: Nx release â€“ version & tag
        if: steps.affected.outputs.appsCsv != ''
        run: |
          npx nx release version \
            --projects="${{ steps.affected.outputs.appsCsv }}" \
            --git-commit --git-tag --git-push --verbose

  changelog:
    needs: version
    if: needs.version.outputs.appsJson != ''
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: ${{ fromJson(needs.version.outputs.appsJson) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update to latest commit + tags
        run: |
          git fetch origin main --tags
          git reset --hard origin/main

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: git config --global user.name  "release-bot"
      - run: git config --global user.email "release-bot@users.noreply.github.com"

      - run: npm install

      - name: Changelog + draft release (${{ matrix.app }})
        env:
          APP: ${{ matrix.app }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx nx release changelog \
          --projects="$APP" \
          --git-commit=false \
          --git-tag=false \
          --git-push=false

            VER=$(jq -r .version apps/$APP/package.json)

          gh release create "$APP@$VER" \
            --repo "$GITHUB_REPOSITORY" \
            --draft \
            --title "$APP $VER" \
            --notes-file "apps/$APP/CHANGELOG.md"
