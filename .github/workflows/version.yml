name: version
on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.affected.outputs.apps }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }

      - run: git config --global user.name "release-bot"
      - run: git config --global user.email "release-bot@users.noreply.github.com"

      - run: npm install

      - id: affected
        run: |
          APPS=$(npx nx show projects --affected \
                    --base="${{ github.event.before }}" \
                    --head="${{ github.event.after }}" \
                    --json | jq -r '.[]' | jq -R -s -c 'split("\n")[:-1]')
          echo "apps=$APPS" >>"$GITHUB_OUTPUT"

      - name: Generate changelogs
        if: steps.affected.outputs.apps != '[]'
        run: |
          echo '${{ steps.affected.outputs.apps }}' | jq -r '.[]' | while read app; do
            echo "Generating changelog for $app"
            npx nx release changelog \
              --projects="$app" \
              --git-commit=false --git-tag=false --git-push=false
          done

      - name: Nx release â€“ version & tag
        if: steps.affected.outputs.apps != '[]'
        run: |
          npx nx release version \
            --projects="${{ steps.affected.outputs.apps }}" \
            --git-commit --git-tag --git-push --verbose

  github-releases:
    needs: release
    if: needs.release.outputs.apps != '[]'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: ${{ fromJson(needs.release.outputs.apps) }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update to latest commit + tags
        run: |
          git fetch origin main --tags
          git reset --hard origin/main

      - name: Create GitHub release (${{ matrix.app }})
        env:
          APP: ${{ matrix.app }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VER=$(jq -r .version apps/$APP/package.json)

          gh release create "$APP@$VER" \
            --repo "$GITHUB_REPOSITORY" \
            --draft \
            --title "$APP $VER" \
            --notes-file "apps/$APP/CHANGELOG.md"
